{"version":3,"sources":["Canvas.js","Graph.js","Landing.js","App.js","index.js"],"names":["Canvas","canvasRef","React","createRef","width","this","props","numArr","length","height","Math","max","parseFloat","graphWidth","graphHeight","unitHeight","calculateScaledUnitHeight","barMargin","calculateBarMargins","barWidth","calculateBarWidth","ctx","fillStyle","fillRect","num","offset","font","textAlign","fillText","drawAxes","x","y","i","xCoord","yCoord","barHeight","drawDisplayNumbers","y1","y2","drawDot","beginPath","arc","PI","fill","drawLineBetween","x1","x2","strokeStyle","setLineDash","lineWidth","moveTo","lineTo","stroke","prevCoord","y1Coord","y2Coord","canvas","current","getContext","initializeDimensions","type","drawBarGraph","drawLineGraph","ref","Component","Graph","graphBodyRef","state","setState","getComputedStyle","className","onClick","handleBackBtn","title","switchToBar","switchToLine","Landing","onChange","e","handleTitleInput","placeholder","handleManualInput","id","handleFileInput","for","submitInfo","errorMsg","App","bind","target","value","string","parseNumbers","preventDefault","reader","FileReader","onload","a","text","result","split","join","readAsText","files","str","map","replace","filter","checkInteger","parseInt","isNaN","Number","isInteger","innerText","displayChart","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.44141890.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Canvas extends Component {\n    constructor() {\n        super();\n        this.canvasRef = React.createRef();\n    }\n\n    // calculates bar's width based on given graph width\n    calculateBarWidth(width) {\n        const barAlloc = 0.6 * width;\n        return barAlloc / this.props.numArr.length;\n    }\n\n    // calculates bar's margins based on given graph width\n    calculateBarMargins(width) {\n        const marginAlloc = 0.4 * width;\n        return marginAlloc / (this.props.numArr.length + 1);\n    }\n\n    // gets scaled unit height for each bar to scale to\n    calculateScaledUnitHeight(height) {\n        const maxElem = Math.max(...this.props.numArr);\n        return height / maxElem;\n    }\n\n    // initializes coordinates and widths needed for drawing graph\n    initializeDimensions() {\n        this.width = parseFloat(this.props.graphWidth);\n        this.height = parseFloat(this.props.graphHeight);\n        this.unitHeight = this.calculateScaledUnitHeight(0.85 * this.height);\n        this.barMargin = this.calculateBarMargins(0.95 * this.width);\n        this.barWidth = this.calculateBarWidth(0.95 * this.width);\n    }\n\n    // draws x and y axes\n    drawAxes(height, width) {\n        this.ctx.fillStyle = '#e5c07b';\n        this.ctx.fillRect(20, 0.05 * height, 1.5, 0.9 * height);\n        this.ctx.fillRect(20, 0.95 * height, 0.95 * width, 1.5);\n    }\n\n    // draws display numbers at the bottom of the x-axis\n    drawDisplayNumbers(num, offset) {\n        this.ctx.font = \"20px Montserrat\";\n        this.ctx.fillStyle = \"#abb2bf\";\n        this.ctx.textAlign = \"center\";\n        this.ctx.fillText(num, offset + this.barMargin + this.barWidth/2, 0.95 * this.height + 25);\n    }\n\n    // draws bar graph\n    drawBarGraph() {\n        this.drawAxes(this.height, this.width);\n        \n        const numArr = this.props.numArr;\n        \n        // draws a individual bars\n        const drawSingleBar = (x, y, width, height) => {\n            this.ctx.fillStyle = '#E06C75';\n            this.ctx.fillRect(x, y, width, height);\n            \n        }\n\n        let offset = 20;\n        \n        for (let i = 0; i < numArr.length; i++) {\n            const xCoord = offset + this.barMargin;\n            const yCoord =  0.05 * this.height + (0.9 * this.height - numArr[i] * this.unitHeight );\n            const barHeight = numArr[i] * this.unitHeight;\n\n            drawSingleBar(xCoord, yCoord, this.barWidth, barHeight);\n            this.drawDisplayNumbers(numArr[i], offset);\n            offset += (this.barMargin + this.barWidth);\n        }\n    }\n\n    // draws a line graph\n    drawLineGraph() {\n        this.drawAxes(this.height, this.width);\n\n        const numArr = this.props.numArr;\n\n        // draw vertical line on dot\n        const drawVerticalLine = (x, y1, y2) => {\n            this.ctx.strokeStyle = '#abb2bf';\n            this.ctx.setLineDash([12, 4]);\n            this.ctx.beginPath();\n            this.ctx.moveTo(x, y2);\n            this.ctx.lineTo(x, y1);\n            this.ctx.stroke();\n        }\n\n        // draw dot on graph\n        const drawDot = (x, y) => {\n            this.ctx.fillStyle = '#98c379';\n            this.ctx.beginPath();\n            this.ctx.arc(x, y, 5, 0, 2 * Math.PI);\n            this.ctx.fill();\n        }\n\n        // draw line between previous and current dot\n        const drawLineBetween = (x1, y1, x2, y2) => {\n            this.ctx.strokeStyle = \"#61afef\";\n            this.ctx.setLineDash([]);\n            this.ctx.lineWidth = 1.5;\n            this.ctx.moveTo(x1, y1);\n            this.ctx.lineTo(x2,  y2);\n            this.ctx.stroke();\n        }\n\n        let offset = 20;\n        let prevCoord = [20, 0.95 * this.height]; // previous coords\n\n        for (let i = 0; i < numArr.length; i++) {\n            const xCoord = offset + this.barMargin + this.barWidth / 2;\n            const y1Coord = 0.05 * this.height + (0.9 * this.height);\n            const y2Coord = 0.05 * this.height + (0.9 * this.height - this.props.numArr[i] * this.unitHeight);\n\n            drawVerticalLine(xCoord, y1Coord, y2Coord);\n            drawDot(xCoord, y2Coord);\n            drawLineBetween(prevCoord[0], prevCoord[1], xCoord, y2Coord);\n            this.drawDisplayNumbers(numArr[i], offset);\n\n            // update previous coords to current coords\n            prevCoord[0] = xCoord;\n            prevCoord[1] = y2Coord;\n            offset += (this.barMargin + this.barWidth);\n        }\n    }\n\n    // initializes canvas' ref and it's context on component mount\n    componentDidMount() {\n        this.canvas = this.canvasRef.current;\n        this.ctx = this.canvas.getContext('2d');\n    }\n\n    // sets dimensions to canvas, and other calculated bar dimensions as class' attributes\n    getSnapshotBeforeUpdate() {\n        this.initializeDimensions();\n        this.canvas.height = this.height;\n        this.canvas.width = this.width;\n        \n        // draw types of graph on state update\n        if (this.props.type === 'bar') {\n            this.drawBarGraph();\n        } else if (this.props.type === 'line') {\n            this.drawLineGraph();\n        }\n    }\n\n    render() {\n        return (\n            <canvas ref={this.canvasRef}></canvas>\n        )\n    }\n}\n\nexport default Canvas","import React, { Component } from 'react';\nimport Canvas from \"./Canvas.js\";\nimport './App.css';\n\n\nclass Graph extends Component {\n    constructor(props) {\n        super(props);\n        this.graphBodyRef = React.createRef();\n        this.state = {\n            'type' : 'bar',\n        }\n    }\n\n    // when graph is mounted, get all values and set state\n    componentDidMount() {\n        this.setState({'numArr' : this.props.numArr});\n        this.setState({'graphHeight' : getComputedStyle(this.graphBodyRef.current).height});\n        this.setState({'graphWidth' : getComputedStyle(this.graphBodyRef.current).width});\n    }\n\n    // on user switch to bar graph\n    switchToBar() {\n        this.setState({'type' : 'bar'});\n    }\n\n    // on user switch to line graph\n    switchToLine() {\n        this.setState({'type' : 'line'})\n    }\n\n    render() {\n        return (\n            <div className={'graph-wrapper'}>\n                <div className={'graph-top-header'}>\n                    <div className={'back-btn'} onClick={() => this.props.handleBackBtn()}>Back</div>\n                    <div className={'inline-wrapper'}>\n                        <div className={'graph-title'}>{this.props.title}</div>\n                        <div className={'toggle-view'}>\n                            <div className={\"toggle-btn bar-btn\"} onClick={() => this.switchToBar()}>Bar</div>\n                            <div className={\"toggle-btn line-btn\"} onClick={() => this.switchToLine()}>Line</div>\n                        </div>\n                    </div>\n                </div>\n                <div ref={this.graphBodyRef} className={'graph-body'}>\n                    <Canvas \n                        graphWidth={this.state.graphWidth}\n                        graphHeight={this.state.graphHeight}\n                        type={this.state.type}\n                        numArr={this.state.numArr}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Graph;","import React, { Component } from 'react';\n\nclass Landing extends Component {\n    render() {\n        return (\n            <div className=\"form-wrapper\">\n\t\t\t\t<div className={'form-title'}>Graph Chart Visualizer</div>\n\t\t\t\t<div className={'input-wrapper'}>\n\t\t\t\t\t<label className={'text-label'}>Chart Title:</label>\n\t\t\t\t\t<input type='text' className={'title-input'} onChange={(e) => this.props.handleTitleInput(e)}></input>\n\t\t\t\t</div>\n\t\t\t\t<div className={'input-wrapper'}>\n\t\t\t\t\t<label className={'text-label'}>Manual Input:</label>\n\t\t\t\t\t<input type='text' className={'manual-input'} placeholder=\"Ex. 1, 2, 3, 4\" onChange={(e) => this.props.handleManualInput(e)}></input>\n\t\t\t\t</div>\n\t\t\t\t<div className={'text-span'}><span>Or</span></div>\n\t\t\t\t<div className={'input-wrapper'}>\n\t\t\t\t\t<input type='file' id='files' className={'hidden'} onChange={(e) => this.props.handleFileInput(e)}></input>\n\t\t\t\t\t<label className={'csv-input'} for=\"files\">Select .csv or .txt file</label>\n\t\t\t\t</div>\n                <div id=\"create-chart\" className={'input-wrapper'} onClick={() => this.props.submitInfo()}>\n\t\t\t\t\t<span>Create Chart</span>\n\t\t\t\t</div>\n\t\t\t\t<div className={'text-span'}>\n\t\t\t\t\t<span id='error-msg' ref={this.props.errorMsg}></span>\n\t\t\t\t</div>\n            </div>\n        );\n    }\n}\n\nexport default Landing;","import React, { Component } from 'react';\nimport Graph from './Graph.js';\nimport Landing from './Landing.js';\nimport './App.css';\n\nclass App extends Component {\n\tconstructor() {\n        super();\n\t\tthis.errorMsg = React.createRef();\n        this.state = {\n            'title' : '',\n\t\t\t'displayChart' : false\n        }\n\n\t\t// bings all the methods to the class, so we have reference to App when we pass them down to \n\t\t// the children components\n\t\tthis.handleFileInput = this.handleFileInput.bind(this);\n\t\tthis.handleManualInput = this.handleManualInput.bind(this);\n\t\tthis.handleTitleInput = this.handleTitleInput.bind(this);\n\t\tthis.handleBackBtn = this.handleBackBtn.bind(this);\n\t\tthis.submitInfo = this.submitInfo.bind(this);\n    }\n\t\n\t// handles chart title input\n    handleTitleInput(e) {\n        let title = e.target.value;\n        this.setState({'title': title});\n    }\n\n\t// handles manual input of integers\n\thandleManualInput(e) {\n        let string = e.target.value;\n\t\tthis.setState({'numArr': this.parseNumbers(string)});\n    }\n\n\t// handles back btn click when displaying graph\n\thandleBackBtn() {\n\t\tthis.setState({'displayChart' : false});\n\t}\n\n\t// handles csv and texts files\n\thandleFileInput(e) {\n\t\te.preventDefault()\n\t\tconst reader = new FileReader()\n\t\treader.onload = async (e) => { \n\t\t\tconst text = (e.target.result)\n\t\t\tthis.setState({\n\t\t\t\t'numArr': this.parseNumbers(text.split(\"\\n\").join(\", \")),\n\t\t\t\t'displayChart' : true\n\t\t\t});\n\t\t};\n\t\treader.readAsText(e.target.files[0]);\n\t}\n\n\t// parse numbers from user manual input\n\tparseNumbers(str) {\n\t\t// breaks delimiting commas, and replaces spaces with empty strings\n\t\tlet arr = str.split(\",\").map(x => x.replace(/\\s/g, \"\"));\n\t\t\n\t\treturn arr.filter(x => this.checkInteger(x)).map(x => parseInt(x));\n\t}\n\n\t// returns true if user inputted string is integer, not a float, not an empty string\n\tcheckInteger(num) {\n\t\treturn !isNaN(num) && num !== \"\" && Number.isInteger(parseFloat(num));\n\t}\n\n\t// submits info of title and inputs. If there are any errors, it will display error messages in the HTML\n\tsubmitInfo() {\n\t\tif (this.state.title === \"\") {\n\t\t\tthis.errorMsg.current.innerText = \"Empty chart title\";\n\t\t} else if (!this.state.numArr || this.state.numArr.length === 0) {\n\t\t\tthis.errorMsg.current.innerText = \"Invalid or empty input data\";\n\t\t} else {\n\t\t\tthis.errorMsg.current.innerText = \"\";\n\t\t\tthis.setState({'displayChart' : true});\n\t\t}\n\t}\n\n    render() {\n\t\tif (!this.state.displayChart) {\n\t\t\treturn (\n\t\t\t\t<div className={'app-wrapper'}>\n\t\t\t\t\t<Landing \n\t\t\t\t\t\thandleTitleInput={this.handleTitleInput}\n\t\t\t\t\t\thandleManualInput={this.handleManualInput}\n\t\t\t\t\t\thandleFileInput={this.handleFileInput}\n\t\t\t\t\t\tsubmitInfo={this.submitInfo}\n\t\t\t\t\t\terrorMsg={this.errorMsg}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div className={'app-wrapper'}>\n\t\t\t\t\t<Graph\n\t\t\t\t\t\ttitle={this.state.title}\n\t\t\t\t\t\tnumArr={this.state.numArr}\n\t\t\t\t\t\thandleBackBtn={this.handleBackBtn}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n        \n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}